
; Where the player puts his or her ships
define PLR_BOARD_X        18     
define PLR_BOARD_Y         5
define PLR_BOARD_X_LIMIT  28        
define PLR_BOARD_Y_LIMIT  15

; Where the CPU puts its ships
define CPU_BOARD_X         2
define CPU_BOARD_Y         5
define CPU_BOARD_X_LIMIT  12
define CPU_BOARD_Y_LIMIT  15

; Bit-masks for the controller buttons
include GCPadConstants.ccl
include BoardDataConstants.ccl

variable cursorX
variable cursorY
variable cursorTile

variable ship
variable horz
variable badPlace
variable size

variable numLeft
variable numHit

variable tmp1
variable ptr

variable tx
variable ty
variable tt

variable padA
variable padB

variable hitCount
variable cpuHitCount

variable lastHitXA
variable lastHitYA
variable numLeftA
variable numHitA
variable lastHitXB
variable lastHitYB
variable numLeftB
variable numHitB
variable lastHitXC
variable lastHitYC
variable numLeftC
variable numHitC
variable lastHitXS
variable lastHitYS
variable numLeftS
variable numHitS
variable lastHitXP
variable lastHitYP
variable numLeftP
variable numHitP

variable lastHitX
variable lastHitY

variable tlx
variable tly

; Used in the animated-shot routine
variable blinkX
variable blinkY
variable blinkTile
variable blinkBack

; =======================================================
; Program entry and main game loop
; - Init tiles
; - Draw instructions and get player ships
; - Place CPU ships
; - Alternate shots until someone wins
; - Repeat

cluster init

  ; Load the font data (for COG A)
  call FontData:InitTiles

gameLoop:

  ; Load the game tiles (for COGB)   
  call BoardData:InitTiles
 
  ; Clear the screen
  tileBlock 0,0,30,20,BOARD_BLANK

  ; Draw instructions
  tileText 1,2,inst1
  tileText 1,5,inst2
  tileText 1,7,inst3
  setTile 10,5,RED_B
  setTile 10,7,GREEN_A

  ; Guide the player through placing all ships
  call PlaceShips:placeHumanShips
  
  ; Erase the instructions
  tileBlock 1,2,20,1,BOARD_BLANK
  tileBlock 1,5,10,10,BOARD_BLANK

  ; Place the CPU's ships
  call PlaceShips:placeCPUShips

  ; Init player's last shot
  cursorX = CPU_BOARD_X
  cursorY = CPU_BOARD_Y

loop:

  ; Player goes first
  call playerShot
  if(hitCount==0) {
    call playerWin
    goto gameLoop
  }

  ; CPU goes second
  call CPU:cpuShot
  if(cpuHitCount == 0) {
    call cpuWin
    goto gameLoop
  }

  goto loop

; =======================================================
; Player or CPU wins
; - Draw "You Win!" or "I Win!"
; - Draw "Press any button"
; - Show CPU ships
; - Wait for press

playerWin:
  ; "You Win!" at the top
  tileText 11,3,msg1  
  goto winWait

cpuWin:
  ; "I Win!" at the top
  tileText 12,3,msg2

winWait:  
  ; "Press any button" at the bottom
  tileText 7,16,msg3

  ; Change the tiles to make the invisible
  ; CPU ships visible.
  setTileData BOATS_INVIS_P,5,showUnhit

  ; Wait for button press
winWait2:
  padA = V126 & PAD_LRUDAB_MASK
  if(padA!=0) {        
    goto winWait2
  }
winWait1:
  padA = V126 & PAD_LRUDAB_MASK
  if(padA==0) {     
    goto winWait1
  }  

  return

; =======================================================
; - Flash cursor and wait for key
; - Move cursorX and cursorY within bounds
; - Handle uncovering a CPU ship or a miss

playerShot:

  ; Remember what is at the cursor
  getTile cursorX
  tmp1 = cursorTile

  ; Draw the cursor tile
  cursorTile = CURSOR_B
  setTile cursorX

  ; Flash cursor waiting on button
pShot2:
  padA = V126 & PAD_LRUDAB_MASK
  if(padA!=0) {
    cursorTile = tmp1
    setTile cursorX
    cursorTile = CURSOR_B
    setTile cursorX 
    goto pShot2
  }
pShot1:
  padA = V126 & PAD_LRUDAB_MASK
  if(padA==0) {
    cursorTile = tmp1
    setTile cursorX
    cursorTile = CURSOR_B
    setTile cursorX
    goto pShot1
  } 

  ; Restore whatever was on the screen
  cursorTile = tmp1
  setTile cursorX

  ; Move the cursor if a direction pressed
  if(padA & PAD_RIGHT) {
    cursorX = cursorX + 1
  }
  if(padA & PAD_LEFT) {
    cursorX = cursorX - 1
  }
  if(padA & PAD_UP) {
    cursorY = cursorY - 1
  } 
  if(padA & PAD_DOWN) {
    cursorY = cursorY + 1
  }   

  ; Keep cursor on the board
  if(cursorX<CPU_BOARD_X) {
    cursorX = CPU_BOARD_X
  }
  if(cursorY<CPU_BOARD_Y) {
    cursorY = CPU_BOARD_Y
  }
  if(cursorX>=CPU_BOARD_X_LIMIT) {
    cursorX = cursorX-1
  }
  if(cursorY>=CPU_BOARD_Y_LIMIT) {
    cursorY = cursorY-1
  }

  ; Handle "fire" button
  if(padA & PAD_A) {

    ; Initialize the blinking parameters    
    blinkX = cursorX
    blinkY = cursorY
    blinkBack = cursorTile

    if(cursorTile<COMPUTER_MISS) {            
      ; If shot is on board tile: MISS
      if(cursorTile==BOARD_MAIN) {
        call shotAnimate ; Blink the shot
        blinkBack = HUMAN_MISS
        call shotAnimate ; Blink a miss peg
        return
      }
      ; If "invisible" ship tile: HIT
      if(cursorTile>=BOATS_INVIS_P) {        
        call shotAnimate ; Blink the shot
        blinkBack = cursorTile - 5
        call shotAnimate ; Blink a hit ship
        hitCount = hitCount - 1
        return
      }       
    }     
  }

  ; We only return from this loop with
  ; a valid shot.
  goto playerShot

; =======================================================
; Animates a shot by player or CPU
; - Show the shot-tile (solid white)
; - pause
; - Show the new tile
; - pause
; - Repeate once

shotAnimate: 

  blinkTile = SHOT_INDICATOR
  setTile blinkX
  tmp1 == PAUSE 15000000
  blinkTile = blinkBack
  setTile blinkX
  tmp1 == PAUSE 15000000
  blinkTile = SHOT_INDICATOR
  setTile blinkX
  tmp1 == PAUSE 15000000
  blinkTile = blinkBack
  setTile blinkX
  tmp1 == PAUSE 15000000
  return

; =======================================================

; Various text messages used in the game. The compiler
; turns these into "Draw" data (signaled by the leading
; '|' in the string). Two 255s end a draw string.

inst1:
# "PLACE YOUR SHIPS!",0
inst2:
# "ROTATE = ",0
inst3:
# "PLACE  = ",0

msg1:
# "YOU WIN!",0
msg2:
# "I WIN!",0
msg3:
# "PRESS ANY BUTTON",0

; =======================================================

; When the game is over, we swap these tiles for the
; "invisible" CPU ship tiles so the player can see
; what he or she missed.

showUnhit:
# |WWWWWWWW
# |WG.G.G.G
# |W.WWWWW.
# |WGWG.GWG
# |W.WWWWW.
# |WGWG.G.G
# |W.W.G.G.
# |WG.G.G.G

# |WWWWWWWW
# |WG.G.G.G
# |W.GWWWW.
# |WGWG.G.G
# |W.GWWWG.
# |WG.G.GWG
# |W.WWWWG.
# |WG.G.G.G

# |WWWWWWWW
# |WG.G.G.G
# |W.WWWWG.
# |WGWG.GWG
# |W.WWWWG.
# |WGWG.GWG
# |W.WWWWG.
# |WG.G.G.G

# |WWWWWWWW
# |WG.G.G.G
# |W.G.W.G.
# |WG.W.W.G
# |W.WWWWW.
# |WGWG.GWG
# |W.W.G.W.
# |WG.G.G.G

# |WWWWWWWW
# |WG.G.G.G
# |W.GWWWG.
# |WGWG.GWG
# |W.W.G.G.
# |WGWG.GWG
# |W.GWWWG.
# |WG.G.G.G

include PlaceShips.ccl
include CPU.ccl
include FontTiles.ccl
include BoardTiles.ccl

