' Cluster ''
' MEM(M_INPUTMODE)=3
  long  %1_111_0001__01_000_011_10111010_0000_1011
    long %00000000_000000000000_000000000011
    long %1000000000111100000010011

' INITTILES solids, 10,4
  long %1_111_0010___00_0_01000___0000001000001100
  long %0000000000001010__0000000000000100
' hhh:
' _loop_1_start:
' cs = 2
  long  %1_111_0001__00_000_111_10001010_0000_1011
    long %00001011_000000000000_000000000010

' call drawPics
  long %0_000_001_1111111111111111_000001110

' call getNextColor
  long %0_000_001_1111111111111111_001010101

' call drawPics
  long %0_000_001_1111111111111111_000001110

' call getNextColor
  long %0_000_001_1111111111111111_001010101

' call drawPics
  long %0_000_001_1111111111111111_000001110

' goto hhh
  long %0_000_000_1111111111111111_000000101

' stop
  long %0_000_111_1111111111111111_000000000

' drawPics:
' rx=0
  long  %1_111_0001__00_000_111_10001010_0000_1011
    long %00000101_000000000000_000000000000

' ry=0
  long  %1_111_0001__00_000_111_10001010_0000_1011
    long %00000110_000000000000_000000000000

' rw=2
  long  %1_111_0001__00_000_111_10001010_0000_1011
    long %00000111_000000000000_000000000010

' rh=2
  long  %1_111_0001__00_000_111_10001010_0000_1011
    long %00001000_000000000000_000000000010

' rt=4106
  long  %1_111_0001__01_000_110_10001010_0000_1011
    long %00001001_000000000000_000000000000
    long %1000000001010

' ptr = 0x7FA4
  long  %1_111_0001__01_000_110_10001010_0000_1011
    long %00001010_000000000000_000000000000
    long %111111110100100

' y=0
  long  %1_111_0001__00_000_111_10001010_0000_1011
    long %00000001_000000000000_000000000000

' _if_1_1:
' _if_1_expression:
' _loop_1_start:
' y<6
  long  %1_111_0001__00_000_111_10001010_0011_1011
    long %00000001_000000000000_000000000110

' BRANCH-IFNOT _if_1_false
  long %0_000_010_1111111111111111_001010001

' _if_1_true:
' x=0
  long  %1_111_0001__00_000_111_10001010_0000_1011
    long %00000000_000000000000_000000000000

' _if_2_1:
' _if_2_expression:
' _loop_2_start:
' x<2
  long  %1_111_0001__00_000_111_10001010_0011_1011
    long %00000000_000000000000_000000000010

' BRANCH-IFNOT _if_2_false
  long %0_000_010_1111111111111111_001001010

' _if_2_true:
' z=0
  long  %1_111_0001__00_000_111_10001010_0000_1011
    long %00000010_000000000000_000000000000

' _if_3_1:
' _if_3_expression:
' _loop_3_start:
' z<4
  long  %1_111_0001__00_000_111_10001010_0011_1011
    long %00000010_000000000000_000000000100

' BRANCH-IFNOT _if_3_false
  long %0_000_010_1111111111111111_001000001

' _if_3_true:
' rectangle rx
  long  %1_010_0000___00_1_00000___00000000___00000101
' mem(ptr) = cs
  long  %1_111_0001__01_000_011_10111000_0000_1011
    long %00000000_000000000000_000000001011
    long %1000000010000000000001010

' cx = rx
  long  %1_111_0001__00_000_111_10001000_0000_1011
    long %00001100_000000000000_000000000101

' cy = ry+2
  long  %1_111_0001__00_000_111_11000010_0000_0000
    long %00001101_000000000110_000000000010

' v = cs
  long  %1_111_0001__00_000_111_10001000_0000_1011
    long %00000100_000000000000_000000001011

' setCursor cx
  long %1_010_0100___00_1_00100___00000000__00001100
' call hexByte
  long %0_000_001_1111111111111111_001111000

' ++ptr
  long  %1_111_0001__00_000_111_11000010_0000_0000
    long %00001010_000000001010_000000000001

' rx=rx+4
  long  %1_111_0001__00_000_111_11000010_0000_0000
    long %00000101_000000000101_000000000100

' rt=rt+1
  long  %1_111_0001__00_000_111_11000010_0000_0000
    long %00001001_000000001001_000000000001

' call getNextColor
  long %0_000_001_1111111111111111_001010101

' _loop_3_continue:
' ++z
  long  %1_111_0001__00_000_111_11000010_0000_0000
    long %00000010_000000000010_000000000001

' GOTO _loop_3_start
  long %0_000_000_1111111111111111_000101000

' _loop_3_end:
' _if_3_end:
' _if_3_false:
' rt=rt & 0xFFF0
  long  %1_111_0001__01_000_110_11000010_0000_0111
    long %00001001_000000001001_000000000000
    long %1111111111110000

' rt=rt + 4106
  long  %1_111_0001__01_000_110_11000010_0000_0000
    long %00001001_000000001001_000000000000
    long %1000000001010

' _loop_2_continue:
' ++x
  long  %1_111_0001__00_000_111_11000010_0000_0000
    long %00000000_000000000000_000000000001

' GOTO _loop_2_start
  long %0_000_000_1111111111111111_000100011

' _loop_2_end:
' _if_2_end:
' _if_2_false:
' rx=0
  long  %1_111_0001__00_000_111_10001010_0000_1011
    long %00000101_000000000000_000000000000

' ry=ry+4
  long  %1_111_0001__00_000_111_11000010_0000_0000
    long %00000110_000000000110_000000000100

' _loop_1_continue:
' ++y
  long  %1_111_0001__00_000_111_11000010_0000_0000
    long %00000001_000000000001_000000000001

' GOTO _loop_1_start
  long %0_000_000_1111111111111111_000000101

' _loop_1_end:
' _if_1_end:
' _if_1_false:
' setcursor 0,23
  long %1_010_0010___00_0_00100___00000000__00010111
' print "          PRESS ENTER"
  long  %1_010_0000___00_0_00001___0000001001101100
' GETNUMBER x
  long %1_010_0000___00_0_00110___00000000___00000000
' return
  long %0_001_0000000000000000000000000000

' _if_4_1:
' _if_4_expression:
' _loop_4_start:
' _loop_4_continue:
' getNextColor:
' true
  long  %1_111_0001__00_000_111_00101010_0111_1011
    long %00000000_000000000000_000000000001

' BRANCH-IFNOT _if_4_false
  long %0_000_010_1111111111111111_001110101

' _if_4_true:
' ++cs
  long  %1_111_0001__00_000_111_11000010_0000_0000
    long %00001011_000000001011_000000000001

' v = cs & 15
  long  %1_111_0001__00_000_111_11000010_0000_0111
    long %00000100_000000001011_000000001111

' cx = cs >> 4
  long  %1_111_0001__00_000_111_11000010_0000_0110
    long %00001100_000000001011_000000000100

' cy = v & 8
  long  %1_111_0001__00_000_111_11000010_0000_0111
    long %00001101_000000000100_000000001000

' _if_5_1:
' _if_5_expression:
' v==9
  long  %1_111_0001__00_000_111_10001010_0001_1011
    long %00000100_000000000000_000000001001

' BRANCH-IFNOT _if_5_false
  long %0_000_010_1111111111111111_001100100

' _if_5_true:
' GOTO _loop_4_continue
  long %0_000_000_1111111111111111_001010101

' _if_6_1:
' _if_6_expression:
' _if_5_end:
' _if_5_false:
' v==0
  long  %1_111_0001__00_000_111_10001010_0001_1011
    long %00000100_000000000000_000000000000

' BRANCH-IFNOT _if_6_false
  long %0_000_010_1111111111111111_001101000

' _if_6_true:
' GOTO _loop_4_continue
  long %0_000_000_1111111111111111_001010101

' _if_7_1:
' _if_7_expression:
' _if_6_end:
' _if_6_false:
' v==1
  long  %1_111_0001__00_000_111_10001010_0001_1011
    long %00000100_000000000000_000000000001

' BRANCH-IFNOT _if_7_false
  long %0_000_010_1111111111111111_001101100

' _if_7_true:
' GOTO _loop_4_continue
  long %0_000_000_1111111111111111_001010101

' _if_8_1:
' _if_8_expression:
' _if_7_end:
' _if_7_false:
' cy==0
  long  %1_111_0001__00_000_111_10001010_0001_1011
    long %00001101_000000000000_000000000000

' BRANCH-IFNOT _if_8_false
  long %0_000_010_1111111111111111_001110011

' _if_8_2:
' cx>0
  long  %1_111_0001__00_000_111_10001010_0101_1011
    long %00001100_000000000000_000000000000

' BRANCH-IFNOT _if_8_false
  long %0_000_010_1111111111111111_001110011

' _if_8_true:
' GOTO _loop_4_continue
  long %0_000_000_1111111111111111_001010101

' _if_8_end:
' _if_8_false:
' GOTO _loop_4_end
  long %0_000_000_1111111111111111_001110101

' GOTO _loop_4_start
  long %0_000_000_1111111111111111_001010101

' _loop_4_end:
' _if_4_end:
' _if_4_false:
' cs = cs & 255
  long  %1_111_0001__00_000_111_11000010_0000_0111
    long %00001011_000000001011_000011111111

' return
  long %0_001_0000000000000000000000000000

' hexByte:
' c = v >> 4
  long  %1_111_0001__00_000_111_11000010_0000_0110
    long %00000011_000000000100_000000000100

' call hexChar
  long %0_000_001_1111111111111111_001111111

' c = v & 15
  long  %1_111_0001__00_000_111_11000010_0000_0111
    long %00000011_000000000100_000000001111

' call hexChar
  long %0_000_001_1111111111111111_001111111

' return
  long %0_001_0000000000000000000000000000

' hexChar:
' print hextrans[c]
  long  %1_111_0010___00_0_00010___0000001001001100
    long %00000000000000000000000000000011
' return
  long %0_001_0000000000000000000000000000

' STOP
  long %0_000_111_1111111111111111_000000000

' solids:
' Tile {
  byte  $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $0, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $55, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $aa, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
' hextrans:
' "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0
  byte  $30, $0, $31, $0, $32, $0, $33, $0, $34, $0, $35, $0, $36, $0, $37, $0
' "8",0,"9",0,"A",0,"B",0,"C",0,"D",0,"E",0,"F",0
  byte  $38, $0, $39, $0, $41, $0, $42, $0, $43, $0, $44, $0, $45, $0, $46, $0
' _msg_78:
' "          PRESS ENTER",0
  byte  $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $50, $52, $45, $53, $53, $20, $45, $4e, $54, $45, $52, $0
