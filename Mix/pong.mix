
// General purpose
variable val,z,w,sx,sy,tz

// Used by PLOT
variable x,y,c,xr,yr,tx,ty,yo,bp

// current y coordinates for players (future use)
variable player1Y,player2Y

// Ball information
variable ballx,bally,dx,dy,delx,dely,ctrx,ctry
variable ballstatus

variable scorePlayer1, scorePlayer2

define REFRESH   = 32620
define GC1DATA   = 0x7800
define GC2DATA   = 0x7808
define GC1Rumble = 0x7E6C
define GC2Rumble = 0x7E6D

cluster game

PADMODE TWOPADS

ballx=24
bally=16
dx=1
dy=1
delx=5
dely=8
ctrx=5
ctry=8

scorePlayer1 = 0
scorePlayer2 = 0

call Sound:init

while(1) {

  call graphics:clearScreen

  y = mem(0x7800)    
  call convertAnalogStick
  if(y<2) {
    y=2
  }
  if(y>29) {
    y=29
  }
  x = 2
  z = y
  w = 2
  player1Y = z
  call drawPaddle

  y = mem(0x7808)
  call convertAnalogStick
  if(y<2) {
    y=2
  }
  if(y>29) {
    y=29
  }
  x = 45
  z = y
  w = 2
  player2Y = z
  call drawPaddle

  call moveBall 

  if(ballstatus==5) {
    call sound:missBall
    scorePlayer2=scorePlayer2+1
    ballx=3
  }
  if(ballstatus==6) {
    call sound:missBall
    scorePlayer1=scorePlayer1+1
    ballx=44
  }

  if(scorePlayer1==10 || scorePlayer2==10) { 
    call sound:playerWin
    stop
  }

  if(ballstatus==1) {
    if(ballx<=23) {
      ballx=ballx+1
      dx=1      
      call sound:player1hit
    } else {
      ballx=ballx-1
      dx=0
      call sound:player2hit
    }
    x=ballx
    y=bally
    c=1
    call graphics:plot
  }

  x=8
  y=1
  val=scorePlayer1
  w=3
  z=3
  call score:drawDigit

  x=32
  y=1
  val=scorePlayer2
  w=3
  z=3
  call score:drawDigit
 
  call graphics:refreshScreen
  pause 10ms

}

// ***********************************************************
MoveBall: // ballx, bally, delx, dely, dx, dy, ctrx, ctry ... ballstatus
// ballstatus: 0=OK 1=impact 3=top-edge 4=bottom-edge 
//   5=left-edge 6=right-edge

  ballstatus=0

  ctry=ctry-1
  if(ctry==0) {
    ctry=dely
    if(dy==1) {
      if(bally==31) {
        bally=30
        dy=0
        ballstatus=4
      } else {
        bally=bally+1
      }
    } else {
      if(bally==0) {
        bally=1
        dy=1
        ballstatus=3
      } else {
        bally=bally-1
      }
    }
  }

  ctrx=ctrx-1
  if(ctrx==0) {
    ctrx=delx
    if(dx==1) {
      if(ballx==47) {
        ballx=46
        dx=0
        ballstatus=6
      } else {
        ballx=ballx+1
      }
    } else {
      if(ballx==0) {
        ballx=1
        dx=1
        ballstatus=5
      } else {
        ballx=ballx-1
      }
    }
  }

  x=ballx
  y=bally
  call graphics:getPoint
  if(c!=0) {
    ballstatus=1
  }

  c=1  
  x=ballx
  y=bally
  call graphics:plot

  return

// ***********************************************************
DrawPaddle: // x,z,w
c=1
for(y=z-w;y<=z+w;++y) {
  call graphics:plot
}
return

// ***********************************************************
// Input range of a controller stick is 0-255 with 127 being
// centerd. The max deflections I've seen is about 24 to 224.
// For easy math, we'll take the center 128 values in the range
// of 64 to 191. The screen is 32 pixels high. Y coordinate
// is (VAL-64)/4. (128-64)/4 = 16 ... correct.

ConvertAnalogStick: // y
if(y<64) {
  y=64
}
if(y>191) {
  y=191
}
y=y-64
y=y>>2
y=31-y
return

// ####################################################################################################
// ####################################################################################################
// ####################################################################################################

cluster Sound

// ***********************************************************
init:
return

// ***********************************************************
player1hit:
memcopy player1,0xC0,40
script 0xC0
return

// ***********************************************************
player2hit:
memcopy player2,0xC0,40
script 0xC0
return

// ***********************************************************
missBall:
memcopy miss,0xC0,40
script 0xC0
return

// ***********************************************************
playerWin:
memcopy win,0xC0,40
script 0xC0
return

-------------------------------------------------

Player1:
SEQUENCE {
VOICE0

REGISTER 0,7,0xFE
REGISTER 1,7,0xFF

REGISTER 0,8,4
TEMPO 80.0
4C3

}

Player2:
SEQUENCE {
VOICE0

REGISTER 0,7,0xFE
REGISTER 1,7,0xFF

REGISTER 0,8,4
TEMPO 80.0
4C4

}

Miss:
SEQUENCE {

VOICE0
REGISTER 0,7,0xFC
REGISTER 1,7,0xFF
REGISTER 0,8,4
REGISTER 0,9,4
TEMPO 80.0
8A1 A1 A1 A1
VOICE1
TEMPO 80.0
8B1 B1 B1 B1

}

padalign(4)
Win:
SEQUENCE {

VOICE0
REGISTER 0,7,0xF8
REGISTER 1,7,0xFF
REGISTER 0,8,4
REGISTER 0,9,4
REGISTER 0,10,4
TEMPO 40.0
4C 4C 2C
VOICE1
TEMPO 40.0
4E 4F 2E
VOICE2
TEMPO 40.0
4G 4A 2G

}

// ####################################################################################################
// ####################################################################################################
// ####################################################################################################

cluster Score

// ***********************************************************
DrawDigit: // val, x,y,c,w,z
  val = val + @digitSegmentInfo
  val = current(val)
  sx=x
  sy=y
  if(val&64) {
    call HorizSeg
  }
  if(val&32) {
    x=x+w
    x=x-1
    call VertSeg
  }
  if(val&16) {
    x=x+w
    x=x-1
    y=y+z
    y=y-1
    call VertSeg
  }
  if(val&8) {
    y=y+z    
    y=y+z
    y=y-2    
    call HorizSeg   
  }
  if(val&4) {
    y=y+z
    y=y-1
    call VertSeg
  }
  if(val&2) {
    call VertSeg
  }
  if(val&1) {
    y=y+z
    y=y-1
    call HorizSeg
  }
  return

HorizSeg:
  for(tz=0;tz<w;++tz) {
    call graphics:plot
    x=x+1
  }
  x=sx
  y=sy
  return

VertSeg:
  for(tz=0;tz<z;++tz) {
    call graphics:plot
    y=y+1
  }
  x=sx
  y=sy
  return

----------------------------------------

digitSegmentInfo:
0b0_1111110 // 0
0b0_0110000 // 1
0b0_1101101 // 2
0b0_1111001 // 3
0b0_0110011 // 4
0b0_1011011 // 5
0b0_0011111 // 6
0b0_1110000 // 7
0b0_1111111 // 8
0b0_1110011 // 9

// ####################################################################################################
// ####################################################################################################
// ####################################################################################################

cluster graphics

// ***********************************************************
RefreshScreen:
  mem(REFRESH)=1
  return

// ***********************************************************
ClearScreen:

memcopy clearFrame,0,48 // Clear the screen
return

// ***********************************************************
GetPoint: // X,Y, C

call CalcMem

c = mem(xr) & bp
if(c>0) {
  c=1
}
return

// ***********************************************************
// X,Y,C
Plot:

call CalcMem

if(c!=0) {
  mem(xr) = mem(xr) | bp  
} else {
  bp = ~bp
  mem(xr) = mem(xr) & bp
}
return

// ***********************************************************
// There are 4 quadrants. Figure out which we are in.
CalcMem:

tx = x
ty = y

if(y<16) {

  if(x<24) {

    // Upper left
    xr = tx * 2   // Two bytes per column
    yr = ty / 8   // Byte offset in column
    yo = ty % 8   // Bit offset in byte

    bp = 128 >> yo

    xr = 191 - xr
    xr = xr - yr
    
  } else {

    // Upper right
    tx = tx - 24
    xr = tx * 2   // Two bytes per column
    yr = ty / 8   // Byte offset in column
    yo = ty % 8   // Bit offset in byte

    bp = 128 >> yo

    xr = 143 - xr
    xr = xr - yr    

  }

} else {

  if(x<24) {

    // Lower left
    ty=ty-16
    xr = tx * 2   // Two bytes per column
    yr = ty / 8   // Byte offset in column
    yo = ty % 8   // Bit offset in byte

    bp = 1 << yo

    xr = 48 + xr
    xr = xr + yr    


  } else {

    // Lower right
    ty=ty-16
    tx=tx-24
    xr = tx * 2   // Two bytes per column
    yr = ty / 8   // Byte offset in column
    yo = ty % 8   // Bit offset in byte

    bp = 1 << yo

    xr = 0 + xr
    xr = xr + yr    

  }  

}

return

---------------------------

clearFrame:
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


